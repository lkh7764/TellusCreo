// GameManager가 가져야하는 기능
// 1. ShootRay > GameManager가 정보만 가지고 각 스크립트에서 가져다 쓰는 방식 vs GameManager에서 기능 실행까지 해주는 방식
// 2. 퍼즐&오브젝트 클릭 순서 관련 정보

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
// IsPointerOverGameObect 라이브러리
using UnityEngine.EventSystems;

public class P_GameManager : MonoBehaviour
{
	public static P_GameManager instance;

	// 1. ShootRay
	// 함수로 가져오기 vs 변수 자체 접근하기
	public bool isDown;
	public bool isUp;
	public RaycastHit2D downHit;
	public RaycastHit2D upHit;

	// 2. 퍼즐&오브젝트 클릭 순서 관련 정보
	private bool isGetKeyA;
	private bool isGetKeyB;
	private bool wireConnect;
	private bool dollClear;
	private bool topClear;

	// drumStick 회전 관련 -> DollPuzzle2로 옮겨주기
	public GameObject drumPivot;
	private bool startRotate;
	private float angle;

	private void Awake()
	{
		if (instance == null) { instance = this }
		// DontDestroyOnLoad() 사용해야 하는지 판단
		else { Destroy(gameObject); }
	}

	private void Start()
	{
		isDown = false;
		isUp = false;
		
		isGetKeyA = false;
		isGetKeyB = false;
		wireConnect = false;
		dollClear = false;
		topClear = false;

		// drumStick 회전 관련 -> DollPuzzle2로 옮겨주기
		startRotate = false;
		angle = 0f;
	}

	private void Update()
	{
		if (!EventSystem.current.IsPointerOverGameObject())
		{
			ShootRay();
		}

		// drumStick 회전 관련 -> DollPuzzle2로 옮겨주기
		if (startRotate)
		{
			angle += 80 * Time.deltaTime;
			if (angle >= 80f)
			{
				drumPivot.transform.rotation = Quaternion.Euler(0, 0, 80);
				startRotate = false;
			}
			
			drumPivot.transform.rotation = Quaternion.Euler(0, 0, angle);
		}
	}

	private void ShootRay()
	{
		if (Input.GetMouseButtonDown(0))
		{
			if (!EventSystem.current.IsPointerOverGameObject())
			{
				upHit = null;
				
				isDown = true;
				Vector2 downPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
				Ray2D downRay = new Ray2D(downPos, Vector2.zero);
				downHit = Physics2D.Raycast(downRay.origin, downRay.direction, 1<<30);
			}
		}
		else { isDown = false; }

		if (Input.GetMouseButtonUp(0))
		{
			if (!EventSystem.current.IsPointerOverGameObject())
			{
				downHit = null;

				isUp = true;
				Vector2 upPos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
				Ray2D upRay = new Ray2D(upPos, Vector2.zero);
				upHit = Physics2D.Raycast(upRay.origin, upRay.direction);
			}
		}
		else { isUp = false; }
	}

	public void Set_isGetKeyA() { isGetKeyA = true; }

	public Bool Get_isGetKeyA() { return isGetKeyA; }

	...
}
